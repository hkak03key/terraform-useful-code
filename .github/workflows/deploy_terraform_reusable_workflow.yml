name: CI Terraform Reusable Workflow

on:
  workflow_call:
    inputs:
      working-dir:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      tfcmt-target:
        required: true
        type: string
      tfcmt-is-masking:
        required: true
        type: boolean
      terraform-backend-config-file-path:
        required: false
        type: string
        description: |
          The path of the backend configuration file.
          The format is hcl or json.
      terraform-var-file-path:
        required: false
        type: string
        description: |
          The path of the var-file.
          The format is hcl or json.

    secrets:
      aws-account-name:
        required: true
      aws-account-id:
        required: true
      aws-iam-role-name:
        required: true
      terraform-backend-config-content:
        required: false
        description: |
          The content of backend configuration.
          The format is hcl or json.
      terraform-var-file-content:
        required: false
        description: |
          The content of var-file.
          The format is hcl or json.

env:
  TF_BACKEND_CONFIG_PATH: /tmp/terraform_backend_config.file
  TF_VAR_FILE_PATH: /tmp/tfvar.file

jobs:
  ci-terraform:
    name: CI Terraform
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    defaults:
      run:
        working-directory: ${{ inputs.working-dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2
      - name: PWD
        run: pwd
      - name: Masking
        if: ${{ inputs.tfcmt-is-masking }}
        run: |-
          # github actions
          echo "::add-mask::${{ secrets.aws-account-id }}"
          echo "::add-mask::${{ secrets.aws-account-name }}"
          echo "::add-mask::${{ secrets.aws-iam-role-name }}"
          # tfcmt
          echo "TFCMT_MASKS_SEPARATOR=," >> "$GITHUB_ENV"
          echo "TFCMT_MASKS=regexp:\\Q${{ secrets.aws-account-id }}\\E,regexp:\\Q${{ secrets.aws-account-name }}\\E,regexp:\\Q${{ secrets.aws-iam-role-name }}\\E" >> "$GITHUB_ENV"
      - name: Put terraform-backend-config
        env:
          tf_backend_config_file_path: ${{ inputs.terraform-backend-config-file-path }}
          tf_backend_config_content: ${{ secrets.terraform-backend-config-content }}
        run: |-
          if [ -n '${{ env.tf_backend_config_file_path }}' ] && [ -n '${{ env.tf_backend_config_content }}' ]; then
            echo "Both terraform-backend-config-file-path and terraform-backend-config-content are provided."
            echo "Either terraform-backend-config-file-path or terraform-backend-config-content must be provided."
            exit 1
          elif [ -n '${{ env.tf_backend_config_file_path }}' ]; then
            echo "inputs.terraform-backend-config-file-path is provided."
            cp ${{ env.tf_backend_config_file_path }} ${{ env.TF_BACKEND_CONFIG_PATH }}
          elif [ -n '${{ env.tf_backend_config_content }}' ]; then
            echo "secrets.terraform-backend-config-content is provided."
            echo '${{ env.tf_backend_config_content }}' > ${{ env.TF_BACKEND_CONFIG_PATH }}
          else
            echo "Both terraform-backend-config-file-path and terraform-backend-config-content are not provided."
            echo "Either terraform-backend-config-file-path or terraform-backend-config-content must be provided."
            exit 1
          fi
      - name: Put terraform-var-file
        env:
          tf_var_file_path: ${{ inputs.terraform-var-file-path }}
          tf_var_file_content: ${{ secrets.terraform-var-file-content }}
        run: |-
          if [ -n '${{ env.tf_var_file_path }}' ] && [ -n '${{ env.tf_var_file_content }}' ]; then
            echo "Both terraform-var-file-path and terraform-var-file-content are provided."
            echo "Either terraform-var-file-path or terraform-var-file-content must be provided."
            exit 1
          elif [ -n '${{ env.tf_var_file_path }}' ]; then
            echo "inputs.terraform-var-file-path is provided."
            cp ${{ env.tf_var_file_path }} ${{ env.TF_VAR_FILE_PATH }}
          elif [ -n '${{ env.tf_var_file_content }}' ]; then
            echo "secrets.terraform-var-file-content is provided."
            echo '${{ env.tf_var_file_content }}' > ${{ env.TF_VAR_FILE_PATH }}
          else
            echo "Both terraform-var-file-path and terraform-var-file-content are not provided."
            echo "Either terraform-var-file-path or terraform-var-file-content must be provided."
            exit 1
          fi
      - name: Configure AWS credentials from IAM Role
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.aws-account-id }}:role/${{ secrets.aws-iam-role-name }}
          aws-region: ${{ inputs.aws-region }}
      - name: Install Terraform
        working-directory: .
        run: ./scripts/install_terraform.sh
      - name: Install tfcmt
        working-directory: .
        run: |
          sudo curl -fL -o tfcmt.tar.gz https://github.com/suzuki-shunsuke/tfcmt/releases/download/"$TFCMT_VERSION"/tfcmt_linux_amd64.tar.gz
          sudo tar -C /usr/bin -xzf ./tfcmt.tar.gz
        env:
          TFCMT_VERSION: "v4.9.0"
      - name: Terraform Init
        run: |-
          terraform init -backend-config=${{ env.TF_BACKEND_CONFIG_PATH }}
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: |-
          tfcmt -var "target:${{ inputs.tfcmt-target }}" plan -patch -- terraform plan -lock=false -var-file=${{ env.TF_VAR_FILE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
